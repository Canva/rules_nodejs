"""
Apsect for ExternalNpmPackageInfo to collect node_modules from deps.
"""

load("//lib/private:providers.bzl", "ExternalNpmPackageInfo")

visibility(["//lib/private"])

def _node_modules_aspect_impl(target, ctx):
    if ExternalNpmPackageInfo in target:
        return []

    # provide ExternalNpmPackageInfo if it is not already provided there are ExternalNpmPackageInfo deps
    providers = []

    # map of 'path' to [workspace, sources_depsets]
    paths = {}

    if hasattr(ctx.rule.attr, "deps"):
        # if any deps have has_directories set then has_directories will be true in the exported ExternalNpmPackageInfo
        has_directories = False
        for dep in ctx.rule.attr.deps:
            if ExternalNpmPackageInfo in dep:
                has_directories = has_directories or dep[ExternalNpmPackageInfo].has_directories
                path = dep[ExternalNpmPackageInfo].path
                workspace = dep[ExternalNpmPackageInfo].workspace
                sources_depsets = []
                if path in paths:
                    path_entry = paths[path]
                    if path_entry[0] != workspace:
                        fail("All npm dependencies at the path '%s' must come from a single workspace. Found '%s' and '%s'." % (path, workspace, path_entry[0]))
                    sources_depsets = path_entry[1]
                sources_depsets.append(dep[ExternalNpmPackageInfo].sources)
                paths[path] = [workspace, sources_depsets]
        for path, path_entry in paths.items():
            providers.extend([ExternalNpmPackageInfo(
                direct_sources = depset(),
                sources = depset(transitive = path_entry[1]),
                workspace = path_entry[0],
                path = path,
                has_directories = has_directories,
            )])
    return providers

node_modules_aspect = aspect(
    _node_modules_aspect_impl,
    attr_aspects = ["deps"],
)
