"""
`node_modules` module extension implementation.
"""

load("//lib/private:repositories.bzl", "yarn_install", "YARN_INSTALL_ATTRS")

visibility(["//lib/private"])

def _node_modules_impl(mctx):
    root_modules = []
    for mod in mctx.modules:
        # TODO Use mod.is_root to detect root module and include in returns
        for attrs in mod.tags.yarn:
            if mod.is_root:
                root_modules.append(attrs.name)
            yarn_install(
                name = attrs.name,
                data = attrs.data,
                environment = attrs.environment,
                exports_directories_only = attrs.exports_directories_only,
                generate_local_modules_build_files = attrs.generate_local_modules_build_files,
                included_files = attrs.included_files,
                links = attrs.links,
                manual_build_file_contents = attrs.manual_build_file_contents,
                package_json = attrs.package_json,
                package_path = attrs.package_path,
                timeout = attrs.timeout,
                args = attrs.args,
                frozen_lockfile = attrs.frozen_lockfile,
                use_global_yarn_cache = attrs.use_global_yarn_cache,
                yarn_lock = attrs.yarn_lock,
                host_node_bin = attrs.host_node_bin,
                host_yarn_bin = attrs.host_yarn_bin,
            )

    return mctx.extension_metadata(
        root_module_direct_deps = root_modules,
        root_module_direct_dev_deps = [],
    )

node_modules = module_extension(
    implementation = _node_modules_impl,
    tag_classes = {
        "yarn": tag_class(
            attrs = dict(YARN_INSTALL_ATTRS, **{
                "name": attr.string(
                    mandatory = True,
                ),
            }),
            doc = "",
        )
    },
    doc = "",
)
